# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-27 20:34
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MailUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Please enter the username', max_length=255, unique=True, verbose_name='username')),
                ('max_aliases', models.IntegerField(blank=True, help_text='The max number of aliases the user can use', null=True, verbose_name='Max aliases')),
                ('password', models.CharField(default=None, max_length=255, null=True, verbose_name='password')),
                ('quota', models.PositiveIntegerField(blank=True, help_text='Enter zero for no limit', null=True, verbose_name='quota')),
                ('is_main_cyrus_admin', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Domains',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(error_messages={'unique': 'Domain with that name already exists'}, help_text='Enter domain name', max_length=255, unique=True, verbose_name='Domain name')),
                ('max_quota_per_account', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max quota per account')),
                ('max_accounts_per_domain', models.IntegerField(blank=True, null=True, verbose_name='Max accounts per domain')),
                ('max_aliases_per_account', models.IntegerField(blank=True, null=True, verbose_name='Max aliases per account')),
                ('max_external_aliases', models.IntegerField(blank=True, null=True, verbose_name='Max external aliases in domain')),
                ('is_alias_domain', models.BooleanField(default=False, help_text='an alias domain does not contain accounts', verbose_name='Is alias domain')),
            ],
            options={
                'ordering': ['id'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VirtualDelivery',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', models.CharField(error_messages={'unique': 'Alias already exists'}, help_text='Please enter the wanted alias', max_length=255, unique=True, verbose_name='Alias')),
                ('full_dest', models.CharField(help_text='Please enter a destination for the alias', max_length=255, verbose_name='Destination email')),
                ('is_external_alias', models.BooleanField(default=False, verbose_name='Is external alias')),
                ('is_forwarder', models.BooleanField(default=False, verbose_name='Is forwarder')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('alias_domain', models.ForeignKey(help_text='Please choose the domain for the alias', on_delete=django.db.models.deletion.DO_NOTHING, to='djcyradm.Domains', verbose_name='Alias domain')),
                ('dest', models.ForeignKey(blank=True, db_column='dest', help_text='Please select a destination for the alias', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='destination')),
            ],
            options={
                'ordering': ['id'],
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='mailusers',
            name='domain',
            field=models.ForeignKey(help_text='Please choose the domain of the user', on_delete=django.db.models.deletion.DO_NOTHING, to='djcyradm.Domains', verbose_name='domain'),
        ),
        migrations.AddField(
            model_name='mailusers',
            name='domains',
            field=models.ManyToManyField(blank=True, help_text='The domains the user can administrate, only applies for domainadmins', related_name='admindomains', to='djcyradm.Domains', verbose_name='admindomains'),
        ),
        migrations.AddField(
            model_name='mailusers',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='mailusers',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
